package main

import (
	"context"
	"flag"
	"fmt"
	"github.com/gofiber/fiber/v2"
	"log"
	"os"
	"os/signal"
	"path/filepath"
	"sync"
	"syscall"

	"mediafs/internal/handler"
	"mediafs/internal/middleware"
	"mediafs/internal/service"
)

const (
	port          = ":8000"
	cmdHashPasswd = "hash-password"
)

func main() {
	baseDir, metaDir := ensureMediaFS()

	if len(os.Args) > 1 && os.Args[1] == cmdHashPasswd {
		handlePasswordHashing(metaDir)
		return
	}
	authService := setupAuth(metaDir)
	// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∂–∏–∑–Ω–µ–Ω–Ω—ã–º —Ü–∏–∫–ª–æ–º
	ctx, cancel := context.WithCancel(context.Background())
	defer cancel()

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
	app := setupFiberApp(baseDir, authService)

	// WaitGroup –¥–ª—è –≤—Å–µ—Ö –≥–æ—Ä—É—Ç–∏–Ω
	var wg sync.WaitGroup

	// –ó–∞–ø—É—Å–∫ HTTP‚Äë—Å–µ—Ä–≤–µ—Ä–∞
	wg.Add(1)
	go func() {
		defer wg.Done()
		log.Println("üì° MediaFS running on " + port)
		if err := app.Listen(port); err != nil {
			log.Printf("‚ùå Server error: %v", err)
			cancel()
		}
	}()

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
	sigs := make(chan os.Signal, 1)
	signal.Notify(sigs, syscall.SIGINT, syscall.SIGTERM)

	// –û–∂–∏–¥–∞–Ω–∏–µ —Å–∏–≥–Ω–∞–ª–∞ –∏–ª–∏ –æ—Ç–º–µ–Ω—ã –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
	select {
	case sig := <-sigs:
		log.Printf("üõë Received signal: %v, shutting down...", sig)
	case <-ctx.Done():
		log.Println("üõë Context canceled, shutting down...")
	}

	// –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º HTTP‚Äë—Å–µ—Ä–≤–µ—Ä
	if err := app.Shutdown(); err != nil {
		log.Printf("‚ùå Error during shutdown: %v", err)
	}

	// –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –≥–æ—Ä—É—Ç–∏–Ω
	wg.Wait()
	log.Println("üëã Shutdown complete.")
}

// setupAuth –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç —Å–µ—Ä–≤–∏—Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
func setupAuth(metaDir string) *service.AuthService {
	authPath := filepath.Join(metaDir, "auth.json")
	authService := service.NewAuthService(authPath)

	if err := authService.Load(); err != nil {
		log.Fatal("‚ùå auth.json not found. Create it first with `mediafs hash-password`.")
	}

	return authService
}

// setupFiberApp –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç Fiber‚Äë–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
func setupFiberApp(baseDir string, authService *service.AuthService) *fiber.App {
	app := fiber.New()

	// –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
	app.Post("/auth", handler.AuthHandler(authService))

	// Middleware –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
	app.Use(middleware.BearerAuthMiddleware(authService))

	// HLS-—Ñ–∞–π–ª–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å
	app.Get("/videos", handler.ListFiles(baseDir))                                 // —Å–ø–∏—Å–æ–∫ –≤–∏–¥–µ–æ
	app.Get("/videos/:filename/playlist.m3u8", handler.StreamHLSPlaylist(baseDir)) // .m3u8
	app.Get("/videos/:filename/:segment", handler.StreamHLSSegment(baseDir))       // .ts
	app.Delete("/videos/:filename", handler.DeleteFile(baseDir))                   // —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ–π –ø–∞–ø–∫–∏

	return app
}

// ensureMediaFS –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ —Å–æ–∑–¥–∞—ë—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ ~/.mediafs –∏ ~/.mediafs/.meta
func ensureMediaFS() (mediafsPath string, metaPath string) {
	home, err := os.UserHomeDir()
	if err != nil {
		log.Fatal("Can't find home dir:", err)
	}

	mediafsPath = filepath.Join(home, ".mediafs")
	if err = os.MkdirAll(mediafsPath, 0o755); err != nil {
		log.Fatal("Can't create mediafs dir:", err)
	}

	metaPath = filepath.Join(mediafsPath, ".meta")
	if err = os.MkdirAll(metaPath, 0o755); err != nil {
		log.Fatal("Can't create .meta dir:", err)
	}

	return mediafsPath, metaPath
}

// handlePasswordHashing –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É hash-password –∏ –ø–æ–ª—É—á–∞–µ—Ç –ø—É—Ç—å –∫ –º–µ—Ç–∞‚Äë–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –∏–∑–≤–Ω–µ
func handlePasswordHashing(metaDir string) {
	hashCmd := flag.NewFlagSet(cmdHashPasswd, flag.ExitOnError)
	passwordPtr := hashCmd.String("password", "", "Password to hash and save")
	_ = hashCmd.Parse(os.Args[2:])

	if *passwordPtr == "" {
		log.Fatal("‚ùå Please provide --password")
	}

	authPath := filepath.Join(metaDir, "auth.json")
	authService := service.NewAuthService(authPath)

	if _, err := os.Stat(authPath); err == nil {
		var response string
		fmt.Printf("‚ö†Ô∏è  %s already exists. Overwrite? Type 'yes' to confirm: ", authPath)
		fmt.Scanln(&response)
		if response != "yes" {
			fmt.Println("‚ùå Aborted.")
			return
		}
	}

	if err := authService.SetPassword(*passwordPtr); err != nil {
		log.Fatal("Failed to save password:", err)
	}
	fmt.Println("‚úÖ Password hash saved to:", authPath)
}
